snippet dumpvar
	<pre>{{ JSON.stringify($1, null, 2) }}</pre>

snippet scafold
	<script setup lang="ts">
		import { ref } from 'vue'; 	

		const props = defineProps<{

		}>();
	</script>

	<template>

	</template>

snippet scafoldInput
	<script setup lang="ts">
	defineProps<{
		modelValue: any;
	}>();

	defineEmits(['update:modelValue']);
	</script>

	<template>
		<input :value="modelValue" @input="\$emit('update:modelValue', (\$event as any).target.value)" />
	</template>

snippet scafoldInputForm
	<script setup lang="ts">
	defineProps<{
		modelValue: any;
	}>();

	defineEmits(['update:modelValue']);
	</script>

	<template>
		<input :value="modelValue" @input="\$emit('update:modelValue', (\$event as any).target.value)" />

    <form @submit="\$event.preventDefault()">

		</form>
	</template>

snippet pocketbaseSubmit
	async function submit(event: Event) {
		event.preventDefault();

		try {
			errors.value = {};
			const event = await pb.collection('$1').create(formdata);
			router.push({ name: '$2' });
		} catch (e) {
			const { data } = (e as ClientResponseError).data;
			for (let key in data) {
				errors.value[key] = data[key].message;
			}
		}
	}
	

snippet formSubmit
	function submit(event: Event) {
		event.preventDefault();
	}

snippet refRecord
	let $1 = ref<Record<string, string>>({});

snippet ref
	let $1 = ref($2);
	$0
